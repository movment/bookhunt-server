type AddBookResponse {
  ok: Boolean!
  error: String
}

type Mutation {
  AddBook(title: String!, author: String!, translator: String, image: String): AddBookResponse!
  AddCeleb(name: String!, career: String!, image: String): AddCelebResponse!
  AddBookInList(bookId: Int!, listId: Int!): AddBookInListResponse!
  AddBookList(title: String!): AddBookListResponse!
  AddReview(bookId: Int!, comment: String!, rating: Rating!): AddReviewResponse!
  AddFavorite(bookId: Int!): AddFavoriteResponse!
  SignIn(email: String!, password: String!): SignInResponse!
  SignOut: SignOutResponse!
  SignUp(name: String!, email: String!, password: String!, career: String, image: String): SignUpResponse!
}

type GetBooksResponse {
  ok: Boolean!
  error: String
  books: [Book]
  isFav: Boolean
}

enum SortOptions {
  VIEWS
  PUBDATE
}

type Query {
  GetBooks(bookId: Int, sort: SortOptions): GetBooksResponse!
  SearchBooks(title: String!, max: Int): SearchBooksResponse!
  GetCelebList: GetCelebListResponse!
  GetBooksInList(listId: Int!): GetBooksInListResponse!
  GetLists(type: options): GetListsResponse!
  GetReviews(bookId: Int!): GetReviewsResponse!
}

type SearchBooksResponse {
  ok: Boolean!
  error: String
  books: [Book]
}

type Book {
  id: Int!
  title: String!
  link: String
  image: String
  author: String!
  translator: String
  publisher: String
  pubdate: String
  isbn: String
  description: String
  isFav: Boolean
  reviews: [Review]
}

type AddCelebResponse {
  ok: Boolean!
  error: String
  celeb: Celeb
}

type GetCelebListResponse {
  ok: Boolean!
  error: String
  celebs: [Celeb]
}

type Celeb {
  id: Int!
  name: String!
  career: String!
  image: String
}

type AddBookInListResponse {
  ok: Boolean!
  error: String
}

type AddBookListResponse {
  ok: Boolean!
  error: String
  list: List
}

type GetBooksInListResponse {
  ok: Boolean!
  error: String
  books: [Book]
}

type GetListsResponse {
  ok: Boolean!
  error: String
  lists: [List]
}

enum options {
  ALL
  MY
}

type List {
  id: Int!
  title: String!
  user: User!
}

type AddReviewResponse {
  ok: Boolean!
  error: String
  reviewId: Int
}

type GetReviewsResponse {
  ok: Boolean!
  error: String
  reviews: [Review]
}

enum Rating {
  ONE
  TWO
  THREE
  FOR
  FIVE
}

type Review {
  id: Int!
  comment: String!
  rating: Rating!
  user: User
}

type AddFavoriteResponse {
  ok: Boolean!
  error: String
}

type SignInResponse {
  ok: Boolean!
  error: String
  token: String
}

type SignOutResponse {
  ok: Boolean!
  error: String
}

type SignUpResponse {
  ok: Boolean!
  error: String
}

type User {
  id: Int!
  name: String!
  
  # email: String!
   # password: String!
  career: String
  image: String
}

schema {
  query: Query
  mutation: Mutation
}
